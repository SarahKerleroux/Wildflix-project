import pandas as pd
import streamlit as st
import base64
import streamlit as st
import ast


df = pd.read_csv("last_df.csv")
df_genre = pd.read_csv("df_for_genre.csv")

fr = df[df["original_language"] == "fr"].sort_values(by="popularity", ascending=False)
en = df[df["original_language"] == "en"].sort_values(by="popularity", ascending=False)
it = df[df["original_language"] == "it"].sort_values(by="popularity", ascending=False)
ja = df[df["original_language"] == "ja"].sort_values(by="popularity", ascending=False)
ko = df[df["original_language"] == "ko"].sort_values(by="popularity", ascending=False)

nouveautes_fr = df[df["original_language"] == "fr"].sort_values(by="release_date", ascending=False).head(10)
nouveautes_en = df[df["original_language"] == "en"].sort_values(by="release_date", ascending=False).head(10)
nouveautes_it = df[df["original_language"] == "it"].sort_values(by="release_date", ascending=False).head(10)
nouveautes_ja = df[df["original_language"] == "ja"].sort_values(by="release_date", ascending=False).head(10)
nouveautes_ko = df[df["original_language"] == "ko"].sort_values(by="release_date", ascending=False).head(10)

drame = df[df["genre_ids"] == "Drame"].sort_values(by="popularity", ascending=False)
comedie = df[df["genre_ids"] == "Com√©die"].sort_values(by="popularity", ascending=False)
romance = df[df["genre_ids"] == "Romance"].sort_values(by="popularity", ascending=False)
thriller = df[df["genre_ids"] == "Thriller"].sort_values(by="popularity", ascending=False)
action = df[df["genre_ids"] == "Action"].sort_values(by="popularity", ascending=False)
crime = df[df["genre_ids"] == "Crime"].sort_values(by="popularity", ascending=False)
documentaire = df[df["genre_ids"] == "Documentaire"].sort_values(by="popularity", ascending=False)
horreur = df[df["genre_ids"] == "Horreur"].sort_values(by="popularity", ascending=False)
aventure = df[df["genre_ids"] == "Aventure"].sort_values(by="popularity", ascending=False)
mystere = df[df["genre_ids"] == "Myst√®re"].sort_values(by="popularity", ascending=False)
fantastique = df[df["genre_ids"] == "Fantastique"].sort_values(by="popularity", ascending=False)
musique = df[df["genre_ids"] == "Musique"].sort_values(by="popularity", ascending=False)
animation = df[df["genre_ids"] == "Animation"].sort_values(by="popularity", ascending=False)
familial = df[df["genre_ids"] == "Familial"].sort_values(by="popularity", ascending=False)
histoire = df[df["genre_ids"] == "Histoire"].sort_values(by="popularity", ascending=False)
science_fiction = df[df["genre_ids"] == "Science-fiction"].sort_values(by="popularity", ascending=False)
telefilm = df[df["genre_ids"] == "T√©l√©film"].sort_values(by="popularity", ascending=False)
guerre = df[df["genre_ids"] == "Guerre"].sort_values(by="popularity", ascending=False)
western = df[df["genre_ids"] == "Western"].sort_values(by="popularity", ascending=False)


def add_background(image_path):
    """
    Ajoute une image de fond en utilisant un encodage base64.
    """
    with open(image_path, "rb") as image_file:
        encoded_string = base64.b64encode(image_file.read()).decode()
    st.markdown(
        f"""
        <style>
        .stApp {{
            background-image: url("data:image/png;base64,{encoded_string}");
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;  
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

def accueil():
    # Ajouter l'image de fond
    add_background("fond.png")
    
    # Contenu de l'application
    #st.title("Bienvenue")
    st.markdown("""
        <style>
        .stSelectbox {
            color: rgb(255, 255, 255);
            background-color: gray;
            border-radius: 5px;
            border: 2px solid #007BFF;
            box-shadow: 0px 0px 10px #007BFF;
        }
        .stSelectbox > div[data-baseweb="select"] > div {
            font-family: inherit;
            font-size: 16px;
            color: white;
        }
        </style>
    """, unsafe_allow_html=True)

    # Charger les fichiers CSV
    last_df = pd.read_csv("last_df.csv")
    df_recommendations = pd.read_csv("df_20_000_recomandation.csv")

    # URL de base pour les affiches des films
    base_url = 'https://image.tmdb.org/t/p/original'

    # Afficher l'image avec alignement centr√©
    col1, col2, col3, col4, col5 = st.columns([1.2, 1.2, 2.6, 0.8, 0.7])  # Colonnes pour aligner au centre
    with col3:
        st.image("logo.png", width=330)
    st.markdown(
        f"<h1 style='color:#FFFFFF; text-align: center;'>Bienvenue sur notre Syst√®me de Recommandation</h1>",
        unsafe_allow_html=True
    )

    st.write('')

    # Trier les titres par popularit√©
    sorted_titles_by_popularity = df_recommendations.sort_values(by="popularity", ascending=False)["title"].dropna().unique()

    # Barre de recherche de film
    col_empty1, col_search, col_empty2 = st.columns([1, 4, 1])
    with col_search:
        search_query = st.selectbox(
            "S√©lectionnez ou √©crivez un titre de film :",
            options=[""] + list(sorted_titles_by_popularity)
        )

    if search_query:
        selected_movie = last_df[last_df['title'] == search_query]

        if not selected_movie.empty:
            movie_title = selected_movie.iloc[0]['title']
            st.subheader(f"üé¨ Film s√©lectionn√© : {movie_title}")
            if pd.notna(selected_movie.iloc[0]['poster_path']):
                st.image(base_url + selected_movie.iloc[0]['poster_path'], width=300)
            st.write(f"**Description** : {selected_movie.iloc[0]['overview']}")

            # Rechercher les recommandations dans df_recommendations
            recommendations = df_recommendations[df_recommendations['title'] == movie_title]

            if not recommendations.empty:
                # Extraire dynamiquement les recommandations valides
                recommended_titles = [
                    recommendations.iloc[0][col]
                    for col in recommendations.columns if "Recommendation_" in col and pd.notna(recommendations.iloc[0][col])
                ]

                # Assurer qu'on trouve les recommandations dans last_df
                recommended_movies = last_df[last_df['title'].isin(recommended_titles)]

                # Afficher les recommandations
                st.write("### üçø Films recommand√©s :")
                col1, col2, col3, col4, col5 = st.columns(5)

                # Cr√©er une liste compl√®te avec des "places vides" pour √©viter les bugs d'affichage
                while len(recommended_movies) < 5:
                    empty_row = {'poster_path': None, 'title': "Aucune recommandation", 'overview': ""}
                    recommended_movies = pd.concat([recommended_movies, pd.DataFrame([empty_row])])

                # Convertir en liste pour l'affichage
                recommended_movies_list = recommended_movies.to_dict(orient="records")

                # Ajouter les films recommand√©s dans chaque colonne
                for col, movie in zip([col1, col2, col3, col4, col5], recommended_movies_list):
                    with col:
                        if pd.notna(movie['poster_path']):
                            st.image(f"{base_url}{movie['poster_path']}", use_container_width=True)
                        else:
                            st.image("https://via.placeholder.com/300x450?text=Pas+d'affiche", use_container_width=True)
                        st.write(f"**{movie['title']}**")
                        st.write(movie['overview'])




def top():
    st.markdown(
        "<h1 style='color: #FFD700; text-align: center;'>D√©couvrez le Top 10</h1>", 
        unsafe_allow_html=True
    )
    st.write('')
    st.write('')
    selected_top = st.selectbox('S√©lectionnez une langue',
['choisir','Fran√ßais', 'Anglais', 'Italien', 'Japonais', 'Cor√©en'], index=0)
    
    if selected_top == "Fran√ßais":
        st.subheader("üçø Top 10 Fran√ßais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'
       
        # Parcourir les 10 premiers films fran√ßais
        for i in (range(min(len(fr), 10))):
            row = fr.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
    
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")
                

    elif selected_top == "Anglais":
        st.subheader("üçø Top 10 Anglais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'
        
        # Parcourir les 10 premiers films Anglais
        for i in (range(min(len(en), 10))):
            row = en.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Italien":
        st.subheader("üçø Top 10 Italien")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 premiers films Italien
        for i in (range(min(len(it), 10))):
            row = it.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Japonais":
        st.subheader("üçø Top 10 Japonais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 premiers films Japonais
        for i in (range(min(len(ja), 10))):
            row = ja.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Cor√©en":
        st.subheader("üçø Top 10 Cor√©en")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 premiers films Cor√©en
        for i in (range(min(len(ko), 10))):
            row = ko.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")



def nouveautes():
    st.markdown(
        "<h1 style='color: #FFD700; text-align: center;'>Explorez les nouveaut√©s</h1>", 
        unsafe_allow_html=True
    )
    st.write('')
    st.write('')
    selected_top = st.selectbox('S√©lectionnez une langue',
['choisir','Fran√ßais', 'Anglais', 'Italien', 'Japonais', 'Cor√©en'], index=0)
    
    if selected_top == "Fran√ßais":
        st.subheader("üçø Nouveaut√©s en Fran√ßais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'
       
        # Parcourir les 10 derni√®res sorties de films fran√ßais
        for i in (range(min(len(nouveautes_fr), 10))):
            row = nouveautes_fr.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
    
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")
                

    elif selected_top == "Anglais":
        st.subheader("üçø Nouveaut√©s en Anglais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'
        
        # Parcourir les 10 derni√®res sorties de films Anglais
        for i in (range(min(len(nouveautes_en), 10))):
            row = nouveautes_en.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Italien":
        st.subheader("üçø Nouveaut√©s en Italien")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 derni√®res sorties de films Italien
        for i in (range(min(len(nouveautes_it), 10))):
            row = nouveautes_it.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Japonais":
        st.subheader("üçø Nouveaut√©s en Japonais")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 derni√®res sorties de films Japonais
        for i in (range(min(len(nouveautes_ja), 10))):
            row = nouveautes_ja.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")


    elif selected_top == "Cor√©en":
        st.subheader("üçø Nouveaut√©s en Cor√©en")
        st.write('')
        base_url = 'https://image.tmdb.org/t/p/original'

        # Parcourir les 10 derni√®res sorties de films Cor√©en
        for i in (range(min(len(nouveautes_ko), 10))):
            row = nouveautes_ko.iloc[i]
            st.markdown("""
            <style>
                hr {
                    margin: 2rem auto; /* Centrage automatique et espacement */
                    border: 0;
                    border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                    width: 90%; /* R√©duction de la largeur */
                }
            </style>
            <hr>
            """, unsafe_allow_html=True)#ligne horizontale
        
            # Diviser en colonnes : une pour l'image et une pour le synopsis
            
            empty1, col1, empty2, col2, empty3, col3, empty4 = st.columns([0.6, 1.4, 0.2, 2.5, 0.2, 2, 0.6])# La colonne 2 est deux fois plus large
            
            # Colonne 1 : Affiche du film
            with col1:
                if pd.notna(row['poster_path']):
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.write('')
                    st.image(base_url + row['poster_path'], width=500)
            
            # Colonne 2 : Titre et synopsis
            with col2:
                st.markdown(
                f"<h2 style='color:rgb(152, 227, 252); text-align: center;'>{row['title']}</h2>",
                unsafe_allow_html=True
                )
                #st.header(row['title'])  # Afficher le titre du film
                st.write("")
                st.write("")
                if pd.notna(row['overview']):
                    st.write(f"**Synopsis :** *{row['overview']}*")  # Afficher le synopsis
                    st.write("")
                    st.write("")
                st.write(f"**Acteurs :** *{row['actors']}*")
                st.write("")
                st.write(f"**R√©alisateurs :** *{row['director']}*")

            # Affiche les informations du film        
            with col3:
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write("")
                st.write(f"|**Genre :** *{row['genre_ids']}*")
                st.write("")
                st.write(f"| *Date de Sortie : {row['release_date']}*")
                st.write(f"| *Dur√©e : {row['runtime_min']} minutes*")
                st.write(f"| *Popularit√© : {row['popularity']}*")
                st.write("")
                st.write(f"| *Note du Public sur 10 : {row['vote_average']}*")
                st.write(f"| *Nombre de votes : {row['vote_count']}*")



def genre():
    st.markdown(
        "<h1 style='color: #FFD700; text-align: center;'>Explorez par genre</h1>", 
        unsafe_allow_html=True
    )
    st.write('')
    st.write('')

    # Dropdown pour s√©lectionner un genre
    genres = ['choisir', 'Drame', 'Com√©die', 'Romance', 'Thriller', 'Action', 
              'Crime', 'Documentaire', 'Horreur', 'Aventure', 'Myst√®re', 
              'Fantastique', 'Musique', 'Animation', 'Familial', 'Histoire', 
              'Science-fiction', 'T√©l√©film', 'Guerre', 'Western']
    selected_genre = st.selectbox('S√©lectionnez un genre', genres, index=0)

    if selected_genre == 'choisir':
        return

    # Filtrer les films par genre s√©lectionn√© et garder uniquement ceux avec une affiche valide
    filtered_df = df_genre[
        (df_genre["genre_ids"] == selected_genre) & 
        df_genre['poster_path'].notnull() & 
        df_genre['poster_path'].str.strip().ne('')
    ].sort_values(by="popularity", ascending=False).head(50)

    # V√©rifier s'il y a des films √† afficher
    if filtered_df.empty:
        st.write(f"Aucun film disponible avec une affiche pour le genre {selected_genre}.")
        return

    # Afficher les films
    base_url = 'https://image.tmdb.org/t/p/original'
    st.subheader(f"üçø {selected_genre}")
    st.write('')

    # Cr√©er une liste des affiches valides
    posters = filtered_df['poster_path'].tolist()
    titles = filtered_df['title'].tolist()

    # Afficher les posters dans une grille
    cols = st.columns(5)  # Nombre de colonnes
    for index, (poster_path, title) in enumerate(zip(posters, titles)):
        with cols[index % 5]:  # Assigner √† une colonne sans espace vide
            st.image(base_url + poster_path, width=200)



def langue():
    st.markdown(
        "<h1 style='color: #FFD700; text-align: center;'>Explorez par langue</h1>", 
        unsafe_allow_html=True
    )
    st.write('')
    st.write('')

    # Dropdown pour s√©lectionner une langue
    genres = ['choisir', 'Fran√ßais', 'Anglais', 'Italien', 'Japonais', 'Cor√©en']
    lang_code_map = {
        'Fran√ßais': 'fr',
        'Anglais': 'en',
        'Italien': 'it',
        'Japonais': 'ja',
        'Cor√©en': 'ko'
    }
    selected_langue = st.selectbox('S√©lectionnez une langue', genres, index=0)

    if selected_langue == 'choisir':
        return

    # R√©cup√©rer le code de la langue
    selected_lang_code = lang_code_map[selected_langue]

    # Filtrer les films par langue s√©lectionn√©e et garder uniquement ceux avec une affiche valide
    filtered_df = df[
        (df["original_language"] == selected_lang_code) & 
        df['poster_path'].notnull() & 
        df['poster_path'].str.strip().ne('')
    ].sort_values(by="popularity", ascending=False).head(50)

    # V√©rifier s'il y a des films √† afficher
    if filtered_df.empty:
        st.write(f"Aucun film disponible avec une affiche pour la langue {selected_langue}.")
        return

    # Afficher les films
    base_url = 'https://image.tmdb.org/t/p/original'
    st.subheader(f"üçø {selected_langue}")
    st.write('')

    # Cr√©er une liste des affiches valides et des titres
    posters = filtered_df['poster_path'].tolist()
    titles = filtered_df['title'].tolist()

    # Afficher les posters dans une grille
    cols = st.columns(5)  # Nombre de colonnes
    for index, (poster_path, title) in enumerate(zip(posters, titles)):
        with cols[index % 5]:  # Assigner √† une colonne sans espace vide
            st.image(base_url + poster_path, width=200)



def projet():
    st.markdown(
        "<h1 style='color: #FFFFFF; text-align: center;'>Notre projet</h1>", 
        unsafe_allow_html=True
    )
    st.write('')

        # Afficher l'image avec alignement centr√©
    col1, col2 = st.columns([3, 5])  # Colonnes pour aligner au centre
    with col1:
        st.image("ordi_logo.png", width=400)
    with col2 : 
        st.write('')
        st.write('')
        st.write("Bienvenue sur Wildflix ‚Äì Votre plateforme ultime pour d√©couvrir des films exceptionnels !")
        st.write("Chez Wildflix, nous transformons votre exp√©rience cin√©matographique gr√¢ce √† un service de recommandation intelligent et intuitif. Explorez un catalogue riche et vari√© comprenant des milliers de films soigneusement s√©lectionn√©s pour satisfaire toutes vos envies et vos curiosit√©s.")
    st.write("Pourquoi choisir Wildflix ?")
    st.write('')
    st.write("üîç Recommandations personnalis√©es : Gr√¢ce √† notre technologie avanc√©e, Wildflix analyse vos pr√©f√©rences et vous propose des films que vous √™tes presque s√ªr d‚Äôaimer. Nos algorithmes prennent en compte de nombreux crit√®res, tels que la popularit√© des films, le casting, la date de sortie, le genre, et bien plus encore.")
    st.write('')
    st.write("üî• Top du moment et nouveaut√©s : Restez √† la pointe des tendances avec notre onglet 'Top du moment', constamment mis √† jour, et d√©couvrez les derniers films fra√Æchement ajout√©s dans la section 'Nouveaut√©s'.")
    st.write('')
    st.write("üé≠ Filtres intuitifs : Vous cherchez un film d'un genre sp√©cifique ou dans une langue particuli√®re ? Nos filtres ergonomiques vous permettent de naviguer facilement dans notre vaste catalogue.")
    st.write('')
    st.write("üåü Une exp√©rience sur-mesure : Chez Wildflix, tout est con√ßu pour vous offrir une interface fluide et agr√©able, o√π chaque clic vous rapproche de votre prochaine d√©couverte cin√©matographique.")
    st.write('')
    st.write("Wildflix : Une plateforme data-driven au service du 7·µâ art")
    st.write("Nous mettons la puissance des donn√©es au service de votre passion pour le cin√©ma. Gr√¢ce √† des algorithmes intelligents et des mises √† jour r√©guli√®res, nous sommes d√©termin√©s √† vous offrir une exp√©rience qui √©volue et s‚Äôadapte √† vos go√ªts.")
    st.write("Plongez dans l'univers du cin√©ma avec Wildflix et laissez-vous surprendre par des recommandations qui vous ressemblent.")
    st.write('')
    st.write("üëâ Rejoignez-nous d√®s aujourd'hui et d√©couvrez votre prochain film coup de c≈ìur !")
    st.markdown("""
        <style>
            hr {
                margin: 2rem auto; /* Centrage automatique et espacement */
                border: 0;
                border-top: 2px solid #ADD8E6; /* Bleu p√¢le */
                width: 90%; /* R√©duction de la largeur */
            }
        </style>
        <hr>
        """, unsafe_allow_html=True)#ligne horizontale